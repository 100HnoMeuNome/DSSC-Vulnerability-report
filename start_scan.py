from __future__ import print_function
import requests
import json
import argparse
import os

from smartcheck import Smartcheck

def parse_args():
    """Parse command-line arguments."""

    # This is split out from the main() function solely so that I can skip over
    # it more easily when going through the code.

    parser = argparse.ArgumentParser(
        description='List vulnerabilities found in scans',
    )

    parser.add_argument(
        '--smartcheck-host',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_HOST', None),
        help='The hostname of the Deep Security Smart Check deployment. Example: smartcheck.example.com'
    )

    parser.add_argument(
        '--smartcheck-user',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_USER', None),
        help='The userid for connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--smartcheck-password',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_PASSWORD', None),
        help='The password for connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--insecure-skip-tls-verify',
        action='store_true',
        default=os.environ.get('DSSC_INSECURE_SKIP_TLS_VERIFY', False),
        help='Ignore certificate errors when connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--aws-region',
        action='store',
        default=os.environ.get('DSSC_AWS_REGION', False),
        help='AWS region name for ecr registry'
    )

    parser.add_argument(
        '--aws-access-key',
        action='store',
        default=os.environ.get('DSSC_AWS_ACCESS_KEY', False),
        help='AWS ACCESS KEY'
    )

    parser.add_argument(
        '--aws-secret-key',
        action='store',
        default=os.environ.get('DSSC_AWS_SECRET_KEY', False),
        help='AWS SECRET KEY'
    )

    parser.add_argument(
        'image',
        help='The image to scan. Example: registry.example.com/project/image:latest'
    )

    return parser.parse_args()


def get_token(smartcheck_host, userid, password):
    # print("----- Generating Token ----- "+userid)
    payload = {'user': {'userID': userid, 'password': password}}
    r = requests.post('https://' + smartcheck_host + '/api/sessions', json=payload, verify=False)
    z = json.loads(r.text)
    return z


def main():
    args = parse_args()
    token = get_token(args.smartcheck_host, args.smartcheck_user, args.smartcheck_password)
    print(token)

    credentials = {"aws": {
        "region": args.aws_region,
        "accessKeyID": args.aws_access_key,
        "secretAccessKey": args.aws_secret_key
    }}
    print("credentials ", credentials)

    insecure_skip_tls_verify = True
    with Smartcheck(
                base=args.smartcheck_host,
                verify=(not insecure_skip_tls_verify),
                user=args.smartcheck_user,
                password=args.smartcheck_password
        )as session:

        result = session.create_scan(args.image, token['token'], 'v1', args.smartcheck_host, credentials)
        print("result", result)


if __name__ == '__main__':
    main()