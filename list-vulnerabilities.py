#!/usr/bin/env python3
#
# Copyright 2019 Trend Micro and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import print_function
# from four import csvconvert

import xlsxwriter
import argparse
import os
import sys

from smartcheck import Smartcheck

ALL_SEVERITIES = [
    'defcon1',
    'critical',
    'high',
    'medium',
    'low',
    'negligible',
    'unknown',
]


def get_vector(vector, vulnerability):
    """Get a vector out of the CVSS definition (if present) for a vulnerability."""

    vectors = []

    # Some sources have metadata as { metadata: NVD: CVSSv3: Vectors: "..." }
    # and others have { metadata: CVSSv2: "..." }
    if 'metadata' in vulnerability:
        if 'NVD' in vulnerability['metadata']:
            vectors = vulnerability['metadata']['NVD'].get(
                'CVSSv3', {}).get('Vectors', '').split('/')
            if len(vectors) == 1:
                vectors = vulnerability['metadata']['NVD'].get(
                    'CVSSv2', {}).get('Vectors', '').split('/')
        else:
            cvssV2 = vulnerability['metadata'].get('CVSSv2', None)
            if isinstance(cvssV2, str):
                vectors = cvssV2.split('/')
                # The first element is the score, which we're not using here
                vectors.pop(0)

    found = list(filter(lambda x: vector in x, vectors))
    if found:
        return found[0]

    return None


def sev_list(min_level):
    return ALL_SEVERITIES[:ALL_SEVERITIES.index(min_level) + 1]


def parse_args():
    """Parse command-line arguments."""

    # This is split out from the main() function solely so that I can skip over
    # it more easily when going through the code.

    parser = argparse.ArgumentParser(
        description='List vulnerabilities found in scans',
    )

    parser.add_argument(
        '--smartcheck-host',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_HOST', None),
        help='The hostname of the Deep Security Smart Check deployment. Example: smartcheck.example.com'
    )

    parser.add_argument(
        '--smartcheck-user',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_USER', None),
        help='The userid for connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--smartcheck-password',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_PASSWORD', None),
        help='The password for connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--insecure-skip-tls-verify',
        action='store_true',
        default=os.environ.get('DSSC_INSECURE_SKIP_TLS_VERIFY', False),
        help='Ignore certificate errors when connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--min-severity',
        action='store',
        default='high',
        help='The minimum severity of vulnerability to show. Defaults to "high". Values: [defcon1,critical,high,medium,low,negligible,unknown]'
    )

    parser.add_argument(
        '--show-overridden',
        action='store_true',
        help='Show vulnerabilities that have been marked as overridden'
    )

    parser.add_argument(
        '--show-fixed',
        action='store_true',
        help='Show vulnerabilities that have been fixed by a later layer'
    )

    parser.add_argument(
        'image',
        help='The image to scan. Example: registry.example.com/project/image:latest'
    )

    return parser.parse_args()


def generate_xls(data):
    import xlsxwriter

    workbook = xlsxwriter.Workbook('Deep Security Report.xlsx')

    # By default worksheet names in the spreadsheet will be
    # Sheet1, Sheet2 etc., but we can also specify a name.
    worksheet = workbook.add_worksheet("Security Analysis")

    # Start from the first cell. Rows and
    # columns are zero indexed.
    header = workbook.add_format(
        {'bold': True, 'bg_color': '#17EF24', 'border': 1, 'font': 'Copperplate Gothic Light', 'font_size': 18})
    subhead = workbook.add_format(
        {'bold': True, 'bg_color': '#C1EF17', 'font': 'Copperplate Gothic Light', 'font_size': 16})
    tablehead = workbook.add_format(
        {'bold': True, 'bg_color': '#17AEEF', 'font': 'Copperplate Gothic Light', 'font_size': 12})

    # Populating malware report
    worksheet.merge_range(0, 0, 3, 3, data['malware']['name'], header)
    worksheet.set_column('A:A', 45)
    worksheet.set_column('B:B', 35)
    worksheet.set_column('C:C', 25)

    row = 3
    col = 0
    row += 1
    size = len(data['malware']['items'])
    worksheet.add_table('A5:B10', {'header_row': False})
    worksheet.write(row, col, "Name", tablehead)
    worksheet.write(row, col + 1, "Infected File", tablehead)
    row += 1
    for item in data['malware']['items']:
        worksheet.write(row, col, item['name'])
        worksheet.write(row, col + 1, item['infected_file'])
        row += 1

    # Populating content risk report ends here
    tabletwo = 10
    worksheet.merge_range(tabletwo, col, tabletwo + 3, col + 3, data['content_risk']['name'], header)
    worksheet.add_table('A15:B25', {'header_row': False})
    worksheet.write(tabletwo + 4, col, "Name", tablehead)
    worksheet.write(tabletwo + 4, col + 1, "Risk found", tablehead)
    tabletwo = 16
    for item in data['content_risk']['items']:
        worksheet.write(tabletwo, col, item[0])
        worksheet.write(tabletwo, col + 1, item[1])
        tabletwo += 1

    # Populating compliance_check_failures report
    tablethree = 26
    worksheet.merge_range(tablethree, col, tablethree + 3, col + 3, data['compliance_check_failures']['name'], header)
    worksheet.add_table('A28:B41', {'header_row': False})
    worksheet.write(tablethree + 4, col, "Name", tablehead)
    worksheet.write(tablethree + 4, col + 1, "compliance_failures", tablehead)
    tablethree = 31
    for item in data['compliance_check_failures']['items']:
        worksheet.write(tablethree, col, item[0])
        worksheet.write(tablethree, col + 1, item[1])
        tablethree += 1

    # Populating compliance_checklist report
    tablefour = 42
    worksheet.merge_range(tablefour, col, tablefour + 3, col + 3, data['compliance_checklist']['name'], header)
    worksheet.add_table('A48:B57', {'header_row': False})
    worksheet.merge_range(tablefour + 4, 0, tablefour + 4, 1, data['compliance_checklist']['pci-dss']['name'], subhead)
    worksheet.write(tablefour + 5, col, "result_title", tablehead)
    worksheet.write(tablefour + 5, col + 1, "result", tablehead)
    tablefour = 48
    for item in data['compliance_checklist']['pci-dss']['items']:
        worksheet.write(tablefour, col, item['result_title'])
        worksheet.write(tablefour, col + 1, item['result'])
        tablefour += 1

    # Populating compliance_checklist report
    tablefive = 58
    # worksheet.merge_range(tablefive, col, tablefive + 3, col + 3, data['compliance_checklist']['name'], bold)
    worksheet.add_table('A59:B70', {'header_row': False})
    worksheet.merge_range(tablefive, 0, tablefive, 1, data['compliance_checklist']['nist800190']['name'], subhead)
    worksheet.write(tablefive + 1, col, "result_title", tablehead)
    worksheet.write(tablefive + 1, col + 1, "result", tablehead)
    tablefive = 60
    for item in data['compliance_checklist']['nist800190']['items']:
        worksheet.write(tablefive, col, item['result_title'])
        worksheet.write(tablefive, col + 1, item['result'])
        tablefive += 1

    # Populating compliance_checklist report
    tablesix = 71
    # worksheet.merge_range(tablefour, col, tablefour + 3, col + 3, data['compliance_checklist']['name'], header)
    worksheet.add_table('A73:B84', {'header_row': False})
    worksheet.merge_range(tablesix, 0, tablesix, 1, data['compliance_checklist']['hipaa']['name'], subhead)
    worksheet.write(tablesix + 1, col, "result_title", tablehead)
    worksheet.write(tablesix + 1, col + 1, "result", tablehead)
    tablesix = 73
    for item in data['compliance_checklist']['hipaa']['items']:
        worksheet.write(tablesix, col, item['result_title'])
        worksheet.write(tablesix, col + 1, item['result'])
        tablesix += 1

    # Populating vulnerable_package report
    tableseven = 85
    worksheet.merge_range(tableseven, col, tableseven + 3, col + 3, data['vulnerable_package']['name'], header)
    worksheet.add_table('A89:D132', {'header_row': False})
    worksheet.write(tableseven + 4, col, "name", tablehead)
    worksheet.write(tableseven + 4, col + 1, "severity", tablehead)
    worksheet.write(tableseven + 4, col + 2, "cve", tablehead)
    worksheet.write(tableseven + 4, col + 3, "items", tablehead)
    tableseven = 90
    for item in data['vulnerable_package']['items']:
        worksheet.write(tableseven, col, item['name'])
        worksheet.write(tableseven, col + 1, item['severity'])
        worksheet.write(tableseven, col + 2, item['cve'])
        worksheet.write(tableseven, col + 3, item['items'])
        tableseven += 1
    workbook.close()


def get_analysis(smartcheck_host, smartcheck_user, smartcheck_password, min_severity, image, show_fixed,
                 show_overridden,
                 insecure_skip_tls_verify=True):
    result = {
        "malware": {
            "name": "Malware found in image",
            "items": []
        },
        "content_risk": {
            "name": "Content secret risk found",
            "items": []
        },
        "compliance_check_failures": {
            "name": "Failed Compliance checklist for image",
            "items": []
        },
        "compliance_checklist": {
            "name": "display checklist_compliance of Trend Micro",
            "pci-dss": {
                "name": "Trend Micro PCI-DSS v3 Docker Compliance",
                "items": []
            },
            "nist800190": {
                "name": "Trend Micro NIST 800-190 Docker Compliance",
                "items": []
            },
            "hipaa": {
                "name": "Trend Micro HIPAA Docker Compliance",
                "items": []
            }

        },
        "vulnerable_package": {
            "name": "vulnerable_package list table",
            "items": []

        }
    }

    if smartcheck_host is None:
        print('smartcheck-host is required', file=sys.stderr)
        sys.exit(1)

    try:
        notable_list = sev_list(min_severity)
    except ValueError:
        print('unrecognized severity')
        sys.exit(1)

    with Smartcheck(
            base=smartcheck_host,
            verify=(not insecure_skip_tls_verify),
            user=smartcheck_user,
            password=smartcheck_password
    ) as session:
        # list_scans(image) will return a generator that will give us all of the
        # scans for that image if we ask for them. We're only going to ask for one
        # because we only care about the last scan result.

        for scan in session.list_scans(image, limit=1):

            # We only want to print out the header if there are notable vulnerabilities,
            # which we won't know until later.
            first = True

            # list_vulnerable_packages(scan) will return a generator that will give
            # us all of the vulnerable packages. Each package will have a list of
            # vulnerabilities.

            for package_malware in session.list_malware(scan):
                result['malware']['items'].append({
                    "name": package_malware['icrc']['name'],
                    "infected_file": package_malware['filename']
                })
            for package_content in session.list_content_findings(scan):
                result['content_risk']['items'].append({
                    "severity": package_content['severity'],
                    "severity content found in image": package_content['metadata']['SubCategory1'],
                    "found at": package_content['filename'],
                })

            for package_checklist in session.list_checklist_findings(scan):
                if package_checklist['profile']['title'] == "Trend Micro PCI-DSS v3 Docker Compliance":
                    result['compliance_checklist']['pci-dss']["items"].append({
                        "result_title": package_checklist['result']['title'],
                        "result": package_checklist['result']['result']})

            for package_checklist in session.list_checklist_findings(scan):
                if package_checklist['profile']['title'] == "Trend Micro NIST 800-190 Docker Compliance":
                    result['compliance_checklist']['nist800190']['items'].append({
                        "result_title": package_checklist['result']['title'],
                        "result": package_checklist['result']['result']})
            for package_checklist in session.list_checklist_findings(scan):
                if package_checklist['profile']['title'] == "Trend Micro HIPAA Docker Compliance":
                    result['compliance_checklist']['hipaa']['items'].append({
                        "result_title": package_checklist['result']['title'],
                        "result": package_checklist['result']['result']})

                    for package in session.list_vulnerable_packages(scan):
                        name = package.get('name', "-unknown-")

                        # Now let's go through the vulnerabilities.
                        for vulnerability in package['vulnerabilities']:
                            severity = vulnerability['severity']

                            # Skip low-severity vulnerabilities unless the user wants them
                            if not severity in notable_list:
                                continue

                            # Don't show vulnerabilities that have been fixed
                            if 'fixed' in vulnerability:
                                if not show_fixed:
                                    continue

                            # Only show overridden vulnerabilities if the user has asked for them
                            if 'override' in vulnerability:
                                if not show_overridden:
                                    continue

                            cve = vulnerability['name']

                            vector = get_vector('AV:', vulnerability)
                            if vector is not None:
                                # Some sources encode the full vector (for example AV:NETWORK),
                                # others use the abbreviation (AV:N). We'll abbreviate for
                                # consistency.
                                vector = vector[:4]
                            else:
                                vector = '?'

                            # We have a notable vulnerability that we want to display, if
                            # it's the first one we'll add a pretty header
                            if first:
                                first = False
                            # result['vulnerable_package']['items'].append(f'{[{name: {15}}, {vector: {6}}, {severity: {10}}, {cve}]}')
                            result['vulnerable_package']['items'].append({
                                "name": name,
                                "severity": severity,
                                "cve": cve,
                                "items": vector
                            })

                    break

    return result


def main():
      args = parse_args()
    result = get_analysis(args.smartcheck_host, args.smartcheck_user, args.smartcheck_password, args.min_severity,
                          args.image, args.show_fixed,
                          args.show_overridden)
    generate_xls(result)

if __name__ == '__main__':
    main()
