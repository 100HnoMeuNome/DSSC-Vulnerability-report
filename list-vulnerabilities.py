#!/usr/bin/env python3
#
# Copyright 2019 Trend Micro and contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import print_function
# from four import csvconvert
from tokenize import group

import xlsxwriter
import argparse
import os
import sys

from smartcheck import Smartcheck

ALL_SEVERITIES = [
    'defcon1',
    'critical',
    'high',
    'medium',
    'low',
    'negligible',
    'unknown',
]


def get_vector(vector, vulnerability):
    """Get a vector out of the CVSS definition (if present) for a vulnerability."""

    vectors = []

    # Some sources have metadata as { metadata: NVD: CVSSv3: Vectors: "..." }
    # and others have { metadata: CVSSv2: "..." }
    if 'metadata' in vulnerability:
        if 'NVD' in vulnerability['metadata']:
            vectors = vulnerability['metadata']['NVD'].get(
                'CVSSv3', {}).get('Vectors', '').split('/')
            if len(vectors) == 1:
                vectors = vulnerability['metadata']['NVD'].get(
                    'CVSSv2', {}).get('Vectors', '').split('/')
        else:
            cvssV2 = vulnerability['metadata'].get('CVSSv2', None)
            if isinstance(cvssV2, str):
                vectors = cvssV2.split('/')
                # The first element is the score, which we're not using here
                vectors.pop(0)

    found = list(filter(lambda x: vector in x, vectors))
    if found:
        return found[0]

    return None


def sev_list(min_level):
    return ALL_SEVERITIES[:ALL_SEVERITIES.index(min_level) + 1]


def parse_args():
    """Parse command-line arguments."""

    # This is split out from the main() function solely so that I can skip over
    # it more easily when going through the code.

    parser = argparse.ArgumentParser(
        description='List vulnerabilities found in scans',
    )

    parser.add_argument(
        '--smartcheck-host',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_HOST', None),
        help='The hostname of the Deep Security Smart Check deployment. Example: smartcheck.example.com'
    )

    parser.add_argument(
        '--smartcheck-user',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_USER', None),
        help='The userid for connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--smartcheck-password',
        action='store',
        default=os.environ.get('DSSC_SMARTCHECK_PASSWORD', None),
        help='The password for connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--insecure-skip-tls-verify',
        action='store_true',
        default=os.environ.get('DSSC_INSECURE_SKIP_TLS_VERIFY', False),
        help='Ignore certificate errors when connecting to Deep Security Smart Check'
    )

    parser.add_argument(
        '--min-severity',
        action='store',
        default='high',
        help='The minimum severity of vulnerability to show. Defaults to "high". Values: [defcon1,critical,high,medium,low,negligible,unknown]'
    )

    parser.add_argument(
        '--show-overridden',
        action='store_true',
        help='Show vulnerabilities that have been marked as overridden'
    )

    parser.add_argument(
        '--show-fixed',
        action='store_true',
        help='Show vulnerabilities that have been fixed by a later layer'
    )

    parser.add_argument(
        'image',
        help='The image to scan. Example: registry.example.com/project/image:latest'
    )

    return parser.parse_args()


def generate_xls(data):
    import xlsxwriter

    workbook = xlsxwriter.Workbook('Deep Security Report.xlsx')

    # By default worksheet names in the spreadsheet will be
    # Sheet1, Sheet2 etc., but we can also specify a name.
    worksheet = workbook.add_worksheet("Security Analysis")

    # Start from the first cell. Rows and
    # columns are zero indexed.
    header = workbook.add_format(
        {'bold': True, 'bg_color': '#17EF24', 'border': 1, 'font': 'Copperplate Gothic Light', 'font_size': 18,
         'font_color': 'red'})
    header.set_align('center')
    subhead = workbook.add_format(
        {'bold': True, 'bg_color': '#C1EF17', 'font': 'Copperplate Gothic Light', 'font_size': 16})
    tablehead = workbook.add_format(
        {'bold': True, 'bg_color': '#17AEEF', 'font': 'Copperplate Gothic Light', 'font_size': 12})
    # set_column(first_col, last_col, width, cell_format, options)

    # Populating malware report tableno1
    worksheet.merge_range(3, 2, 4, 8, data['malware']['name'], header)

    # declarations
    worksheet.set_column('D:G', 25)

    col = 0
    row = 5
    row2 = 0
    row3 = 0
    row4 = 0
    row5 = 0
    tablesize = 0
    tablesize2 = 0
    tablesize3 = 0
    tablesize4 = 0
    tablesize5 = 0

    row += 1  # row=4 , excelrow=5
    malwarelen = len(data['malware']['items'])
    size = "D7:E{}".format(malwarelen + 5)
    if data['malware']['items']:
        no_of_columns = data['malware']['items'][0].keys()
        heads = list(no_of_columns)
    worksheet.add_table(size, {'columns': [{'header': heads[0], 'header_format': tablehead},
                                           {'header': heads[1], 'header_format': tablehead}
                                           ]})

    for item in data['malware']['items']:
        worksheet.write(row, col + 3, item['name'])
        worksheet.write(row, col + 4, item['infected_file'])
        row += 1
    # row=5 , excelrow=6
    tablesize = row + 5  # tablesize=12 , excelrow=8

    # Populating content risk report ends here tableno2
    tablesize2 = tablesize  # row=8 excelrow=9
    worksheet.merge_range(tablesize2, col + 2, tablesize2 + 1, col + 8, data['content_risk']['name'], header)
    tablesize2 += 3  # excelrow=17 tablesize2=16
    contentlen = len(data['content_risk']['items'])
    size2 = "D{}:F{}".format(tablesize2, contentlen + tablesize2 + 1)
    if data['content_risk']['items']:
        no_of_columns2 = data['content_risk']['items'][0].keys()
        heads2 = list(no_of_columns2)
        worksheet.add_table(size2, {'columns': [{'header': heads2[0], 'header_format': tablehead},
                                            {'header': heads2[1], 'header_format': tablehead},
                                            {'header': heads2[2], 'header_format': tablehead}
                                            ]})

    for item in data['content_risk']['items']:
        worksheet.write(tablesize2, col + 3, item['severity'])
        worksheet.write(tablesize2, col + 4, item['severity content found in image'])
        worksheet.write(tablesize2, col + 5, item['found at'])
        tablesize2 += 1

    tablesize3 = tablesize2 + 5

    # Populating compliance_check_failures report tableno3
    tablesize3 += 5
    worksheet.merge_range(tablesize3, col + 2, tablesize3 + 2, col + 8, data['compliance_check_failures']['name'],
                          header)
    tablesize3 += 2
    compliancelen = len(data['compliance_check_failures']['items'])
    size3 = "D{}:F{}".format(tablesize3, compliancelen + tablesize3 + 1)
    if data['compliance_check_failures']['items']:
        no_of_columns3 = data['compliance_check_failures']['items'][0].keys()
        heads3 = list(no_of_columns3)

        worksheet.add_table(size3, {'columns': [{'header': heads3[0], 'header_format': tablehead},
                                                {'header': heads3[1], 'header_format': tablehead},
                                                {'header': heads3[2], 'header_format': tablehead}
                                                ]})
        for item in data['compliance_check_failures']['items']:
            worksheet.write(tablesize3, col + 3, item[0])
            worksheet.write(tablesize3, col + 4, item[1])
            tablesize3 += 1
    tablesize4 = tablesize3 + 5

    # Populating compliance_checklist report tableno4
    worksheet.merge_range(tablesize4, col + 2, tablesize4 + 2, col + 8, data['compliance_checklist']['name'], header)
    tablesize4 += 1

    worksheet.merge_range(tablesize4 + 2, col + 2, tablesize4 + 2, col + 8,
                          data['compliance_checklist']['pci-dss']['name'],
                          subhead)
    tablesize4 += 4  # excelrow=17 tablesize2=16
    checklistlen = len(data['compliance_checklist']['pci-dss']['items'])
    size4 = "D{}:E{}".format(tablesize4, checklistlen + tablesize4 + 1)
    if data['compliance_checklist']['pci-dss']['items']:
        no_of_columns4 = data['compliance_checklist']['pci-dss']['items'][0].keys()
        heads4 = list(no_of_columns4)
        worksheet.add_table(size4, {'columns': [{'header': heads4[0], 'header_format': tablehead},
                                                {'header': heads4[1], 'header_format': tablehead}
                                                ]})

    for item in data['compliance_checklist']['pci-dss']['items']:
        worksheet.write(tablesize4, col + 3, item['result_title'])
        worksheet.write(tablesize4, col + 4, item['result'])
        tablesize4 += 1
    tablesize5 = tablesize4 + 5

    # Populating compliance_checklist report tableno5
    worksheet.merge_range(tablesize5, col + 2, tablesize5, col + 8,
                          data['compliance_checklist']['nist800190']['name'],
                          subhead)
    tablesize5 += 2
    checklistlen2 = len(data['compliance_checklist']['nist800190']['items'])
    size5 = "D{}:E{}".format(tablesize5, checklistlen2 + tablesize5)

    if data['compliance_checklist']['nist800190']['items']:
        no_of_columns5 = data['compliance_checklist']['nist800190']['items'][0].keys()
        heads5 = list(no_of_columns5)
        worksheet.add_table(size5, {'columns': [{'header': heads5[0], 'header_format': tablehead},
                                                {'header': heads5[1], 'header_format': tablehead}
                                                ]})

    for item in data['compliance_checklist']['nist800190']['items']:
        worksheet.write(tablesize5, col + 3, item['result_title'])
        worksheet.write(tablesize5, col + 4, item['result'])
        tablesize5 += 1
    tablesize6 = tablesize5 + 5

    # Populating compliance_checklist report tableno6
    worksheet.merge_range(tablesize6, col + 2, tablesize6, col + 8, data['compliance_checklist']['hipaa']['name'],
                          subhead)
    tablesize6 += 2
    checklistlen3 = len(data['compliance_checklist']['hipaa']['items'])
    size6 = "D{}:E{}".format(tablesize6, checklistlen3 + tablesize6)

    if data['compliance_checklist']['hipaa']['items']:
        no_of_columns6 = data['compliance_checklist']['hipaa']['items'][0].keys()
        heads6 = list(no_of_columns6)
        worksheet.add_table(size6, {'columns': [{'header': heads6[0], 'header_format': tablehead},
                                                {'header': heads6[1], 'header_format': tablehead}
                                                ]})

    for item in data['compliance_checklist']['hipaa']['items']:
        worksheet.write(tablesize6, col + 3, item['result_title'])
        worksheet.write(tablesize6, col + 4, item['result'])
        tablesize6 += 1

    tablesize7 = tablesize6 + 5
    # Populating vulnerable_package report tableno7

    worksheet.merge_range(tablesize7, col + 2, tablesize7 + 2, col + 8, data['vulnerable_package']['name'], header)
    tablesize7 += 4
    vulnerablelen = len(data['vulnerable_package']['items'])
    size7 = "D{}:G{}".format(tablesize7, vulnerablelen + tablesize7)

    if data['vulnerable_package']['items']:
        no_of_columns7 = data['vulnerable_package']['items'][0].keys()
        heads7 = list(no_of_columns7)
        worksheet.add_table(size7, {'columns': [{'header': heads7[0], 'header_format': tablehead},
                                                {'header': heads7[1], 'header_format': tablehead},
                                                {'header': heads7[2], 'header_format': tablehead},
                                                {'header': heads7[3], 'header_format': tablehead}
                                                ]})

    for item in data['vulnerable_package']['items']:
        worksheet.write(tablesize7, col + 3, item['name'])
        worksheet.write(tablesize7, col + 4, item['severity'])
        worksheet.write(tablesize7, col + 5, item['cve'])
        worksheet.write(tablesize7, col + 6, item['items'])
        tablesize7 += 1
    workbook.close()


def get_analysis(smartcheck_host, smartcheck_user, smartcheck_password, min_severity, image, show_fixed,
                 show_overridden,
                 insecure_skip_tls_verify=True):
    result = {
        "malware": {
            "name": "Malware found in image",
            "items": []
        },
        "content_risk": {
            "name": "Content secret risk found",
            "items": []
        },
        "compliance_check_failures": {
            "name": "Failed Compliance checklist for image",
            "items": []
        },
        "compliance_checklist": {
            "name": "display checklist_compliance of Trend Micro",
            "pci-dss": {
                "name": "Trend Micro PCI-DSS v3 Docker Compliance",
                "items": []
            },
            "nist800190": {
                "name": "Trend Micro NIST 800-190 Docker Compliance",
                "items": []
            },
            "hipaa": {
                "name": "Trend Micro HIPAA Docker Compliance",
                "items": []
            }

        },
        "vulnerable_package": {
            "name": "vulnerable_package list table",
            "items": []

        }
    }

    if smartcheck_host is None:
        print('smartcheck-host is required', file=sys.stderr)
        sys.exit(1)

    try:
        notable_list = sev_list(min_severity)
    except ValueError:
        print('unrecognized severity')
        sys.exit(1)

    with Smartcheck(
            base=smartcheck_host,
            verify=(not insecure_skip_tls_verify),
            user=smartcheck_user,
            password=smartcheck_password
    ) as session:
        # list_scans(image) will return a generator that will give us all of the
        # scans for that image if we ask for them. We're only going to ask for one
        # because we only care about the last scan result.

        for scan in session.list_scans(image, limit=1):

            # We only want to print out the header if there are notable vulnerabilities,
            # which we won't know until later.
            first = True

            # list_vulnerable_packages(scan) will return a generator that will give
            # us all of the vulnerable packages. Each package will have a list of
            # vulnerabilities.

            for package_malware in session.list_malware(scan):
                result['malware']['items'].append({
                    "name": package_malware['icrc']['name'],
                    "infected_file": package_malware['filename']
                })
            for package_content in session.list_content_findings(scan):
                result['content_risk']['items'].append({
                    "severity": package_content['severity'],
                    "severity content found in image": package_content['metadata']['SubCategory1'],
                    "found at": package_content['filename'],
                })

            for package_checklist in session.list_checklist_findings(scan):
                if package_checklist['profile']['title'] == "Trend Micro PCI-DSS v3 Docker Compliance":
                    result['compliance_checklist']['pci-dss']["items"].append({
                        "result_title": package_checklist['result']['title'],
                        "result": package_checklist['result']['result']})

            for package_checklist in session.list_checklist_findings(scan):
                if package_checklist['profile']['title'] == "Trend Micro NIST 800-190 Docker Compliance":
                    result['compliance_checklist']['nist800190']['items'].append({
                        "result_title": package_checklist['result']['title'],
                        "result": package_checklist['result']['result']})
            for package_checklist in session.list_checklist_findings(scan):
                if package_checklist['profile']['title'] == "Trend Micro HIPAA Docker Compliance":
                    result['compliance_checklist']['hipaa']['items'].append({
                        "result_title": package_checklist['result']['title'],
                        "result": package_checklist['result']['result']})

                    for package in session.list_vulnerable_packages(scan):
                        name = package.get('name', "-unknown-")

                        # Now let's go through the vulnerabilities.
                        for vulnerability in package['vulnerabilities']:
                            severity = vulnerability['severity']

                            # Skip low-severity vulnerabilities unless the user wants them
                            if not severity in notable_list:
                                continue

                            # Don't show vulnerabilities that have been fixed
                            if 'fixed' in vulnerability:
                                if not show_fixed:
                                    continue

                            # Only show overridden vulnerabilities if the user has asked for them
                            if 'override' in vulnerability:
                                if not show_overridden:
                                    continue

                            cve = vulnerability['name']

                            vector = get_vector('AV:', vulnerability)
                            if vector is not None:
                                # Some sources encode the full vector (for example AV:NETWORK),
                                # others use the abbreviation (AV:N). We'll abbreviate for
                                # consistency.
                                vector = vector[:4]
                            else:
                                vector = '?'

                            # We have a notable vulnerability that we want to display, if
                            # it's the first one we'll add a pretty header
                            if first:
                                first = False

                                """
result['vector']['items'].append([
    {name: {15}}, {vector: {6}}, {severity: {10}}, {cve}
])
"""
                            # result['vulnerable_package']['items'].append(f'{[{name: {15}}, {vector: {6}}, {severity: {10}}, {cve}]}')
                            result['vulnerable_package']['items'].append({
                                "name": name,
                                "severity": severity,
                                "cve": cve,
                                "items": vector
                            })

                    break

    return result


def main():
    """
Mainline
"""
    args = parse_args()
    result = get_analysis(args.smartcheck_host, args.smartcheck_user, args.smartcheck_password, args.min_severity,
                          args.image, args.show_fixed,
                          args.show_overridden)
    print(result)
    generate_xls(result)

    """
malware = result["malware"]["items"][0]
content_risk = result["content_risk"]
checklist = result["checklist"]
vector = result["vector"]["items"][0]
# csvconvert(malware)

# csvconvert(malware)
# print("malwares in dict\n", malware, "content_risk in dict\n", content_risk, "checklist\n", checklist,
#      "vector result", result2)"""


# print("======malware result=====")
# for a, b in result["malware"].items():
#     print(a, "   ", b)
# print("======content risk result=====")
# for a, b in result["content_risk"].items():
#     print(a, "   ", b)
# print("======check list result=====")
# for a, b in result["checklist_compliance"].items():
#     print(a, "   ", b)
# print("======vector result=====")
# for a, b in result["vulnerable_package"].items():
#     print(a, "   ", b)


def csvconvert(malware, vector):
    workbook = xlsxwriter.Workbook('output.xlsx')
    worksheet = workbook.add_worksheet("My sheet")

    # worksheet.add_table({"data": malware})

    row = 0
    col = 0

    # Iterate over the data and write it out row by row.
    for name, items in (malware, vector):
        worksheet.write(row, col, name)

        # worksheet.write(row, col + 1, items)
        row += 1


if __name__ == '__main__':
    main()
